<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>robin2003</title>
    <atom:link
      href="https://robin2003.github.io/blog/rss.xml"
      rel="self" type="application/rss+xml" />
    <link></link>
    <description><![CDATA[]]></description>
    <language>en</language>
    <pubDate>Fri, 31 Dec 2021 00:00:00 +0800</pubDate>
    <lastBuildDate>Thu, 06 Jan 2022 20:34:24 +0800</lastBuildDate>
    <generator>weblorg 0.1.0 (https://emacs.love/weblorg)</generator>
    <webMaster>xxpyb@126.com (robin2003)</webMaster>
    <image>
      <url>https://robin2003.github.io/media/img/8bitme.png</url>
      <title>robin2003</title>
      <link></link>
    </image>

    
    <item>
      <title>2021年终总结</title>
      <link>https://robin2003.github.io/blog/2021年终总结.html</link>
      <author>undefined</author>
      <guid isPermaLink="false">https://robin2003.github.io/blog/2021年终总结.html</guid>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0800</pubDate>
      <description><![CDATA[
<div id="outline-container-2021年终总结" class="outline-2">
<h2 id="2021年终总结">2021年终总结</h2>
<div class="outline-text-2">
<p>
2021年接近尾声了,总结下这一年做了哪些事情：
</p>
</div>
<div id="outline-container-专业技能" class="outline-3">
<h3 id="专业技能">专业技能</h3>
<div class="outline-text-3">
<p>
这年主要看了三本比较好的专业书籍分别是：
大话存储2：这本书是存储行业入门必看书籍，书籍涉猎也比较全，从磁盘结构，到存储系统设计，各个方面都有介绍，并且十分详尽。
Pro Git : 这本书也是一本工具书，git必备工具书。
第一本Docker:项目中开始越来越多使用docker，无论从项目构建，测试，以及生产环境，都有docker身影，所以docker也是程序员
             必须要掌握的技能。这本书从docker使用开始入手，深入浅出非常适合入门，目前还在阅读中。
</p>
</div>
</div>

<div id="outline-container-源码学习" class="outline-3">
<h3 id="源码学习">源码学习</h3>
<div class="outline-text-3">
<p>
程序员应该需要不断的阅读理解好的源码，这样能够提高本省的编程水平。今年主要看的开源源码如下:
</p>
<ol class="org-ol">
<li>linux kernel ext2 filesystem 学习，囫囵吞枣把源码看了一遍，后续有空还会二刷；</li>
<li>emacs lisp plugin 相关source code学习：看了ag-mode/launch-app, 看emacs plugin source code有助于更好使用emacs。</li>
</ol>
</div>
</div>


<div id="outline-container-健身" class="outline-3">
<h3 id="健身">健身</h3>
<div class="outline-text-3">
<p>
随着年龄增大，身体越来越需要通过锻炼来保证在比较好的状态，过去的一年，每天几乎可以完成徒步1w步，另外还完成1月的fitness计划，
中间由于腰痛，没有继续坚持下去。
</p>
</div>
</div>

<div id="outline-container-展望2022" class="outline-3">
<h3 id="展望2022">展望2022</h3>
<div class="outline-text-3" id="text-展望2022">
</div>
<div id="outline-container-工作相关" class="outline-4">
<h4 id="工作相关">工作相关</h4>
<div class="outline-text-4">
<p>
快速熟悉新平台，能够在新平台上完成新功能开发，更深入了解新平台整个架构。
</p>
</div>
</div>
<div id="outline-container-开源相关" class="outline-4">
<h4 id="开源相关">开源相关</h4>
<div class="outline-text-4">
<p>
有闲暇时间，继续学习linux 内核，更深入了解linux 文件系统，进而继续了解linux内核其他模块
</p>

<p>
更加深入精读一些emacs plugin source code，争取能够为一些开源plugin发一些patch。
</p>
</div>
</div>
<div id="outline-container-健身方面" class="outline-4">
<h4 id="健身方面">健身方面</h4>
<div class="outline-text-4">
<p>
希望继续保持好的健身计划，并且规划些适合自己的健身计划，同时能够影响自己的亲人一起进行健身。
</p>

<p>
希望新的一年，读更多好书，看更多源码，也祝愿自己亲人身体健康。
</p>
</div>
</div>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>残留代码是否要删除</title>
      <link>https://robin2003.github.io/blog/残留代码是否要删除.html</link>
      <author>undefined</author>
      <guid isPermaLink="false">https://robin2003.github.io/blog/残留代码是否要删除.html</guid>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0800</pubDate>
      <description><![CDATA[
<div id="outline-container-残留代码到底是否需要删除" class="outline-2">
<h2 id="残留代码到底是否需要删除">残留代码到底是否需要删除？</h2>
<div class="outline-text-2">
<p>
最近项目中出了个regression，由于有人移出了项目中认为没有用的残留配置，删除了一些tomcat的配置，导致所有发送到的tomcat请求都被拒绝，
系统完全没法正常工作,最终导致整个测试计划打乱，要重新出版本测试。
</p>

<p>
问题修复也简单(配置回退)，但是对于残留代码到底要不要删除,能不能删除这个问题本身，是有很多可以探讨的地方的。
</p>
</div>
</div>

<div id="outline-container-为什么会有残留代码" class="outline-2">
<h2 id="为什么会有残留代码">为什么会有残留代码</h2>
<div class="outline-text-2">
<p>
之所以有残留的代码，一方面说明项目持续时间很长，接手的人很多，而最开始的设计在传递两到三代维护者后，大家开始逐渐就忽略掉最原始的
设计，更关注简单，快速解决问题，有时候明明项目中包含相似功能API，但是后续接手的人不知道，又重新设计一个相似功能的API，久而久之
代码就错乱不堪，而当有勇敢的程序员去尝试改动，删除即有的残留在项目中的代码，稍有不慎，就会陷入动老代码必死的尴尬。同样对于web
server的一些配置也是一样，最开始，功能简单，单一，所以配置也简单，但随着业务不断变化，原始配置也会经历，修改，增加，删除，
这一系列生命周期的变化，当然后续接手项目的人，由于自己技术栈跟最开始的不一样，也会选用新技术栈技术，这样就会造成项目中各种技术
交错,配置也乱花渐欲迷人眼目让人头疼.
</p>
</div>
</div>

<div id="outline-container-当接手这样的项目-我们怎么对待残留的代码" class="outline-2">
<h2 id="当接手这样的项目-我们怎么对待残留的代码">当接手这样的项目，我们怎么对待残留的代码</h2>
<div class="outline-text-2">
<p>
当接手这样的项目，我们如何来对待残留的代码呢？ 个人感觉能够删除还是删除最好，不然越到后来，越是乱，但是删除也是需要遵循一些原则，
我觉得可以从如下几点来考虑：
</p>
</div>

<div id="outline-container-需要替换或更新api时" class="outline-3">
<h3 id="需要替换或更新api时">需要替换或更新API时</h3>
<div class="outline-text-3">
<p>
由于API可能被很多代码模块使用，所以我们在替换或更新API时候要考虑对老的API的兼容，尤其对待错误处理时候，一定要保持对老API一致处理方式，
这样可以最小的引入regression。
</p>

<p>
曾经在项目中就碰到过替换API情况，某位同学引入一新API来替换老的，该API给定某字符串查找关联的另一字符串，如果存在通过引用变量
返回该关联字符串。
</p>

<p>
函数原型大致如下
</p>
<pre class="example">
BOOLEAN GetSessionId(String sessionName, String &amp;sessionId);
</pre>

<p>
原始API，对于找不到情况，返回true，sessionId 返回空字符串。
</p>

<p>
但是某同学改变了API这种行为，当找不到，返回NOT<sub>FOUND</sub> error,导致原来调用该API的code，对于这种情况预期返回SUCCESS，但是新API返回NOT<sub>FOUND</sub> error，
由于预期不一致导致引入很多regression。
</p>
</div>
</div>

<div id="outline-container-更新代码库一些配置时" class="outline-3">
<h3 id="更新代码库一些配置时">更新代码库一些配置时</h3>
<div class="outline-text-3">
<p>
这种情况需要非常慎重,如果项目早期,完全没有问题,但是越到后期,尤其经过两三代维护人员维护后,更得慎重,本文开头说的情况就是贸然删除自以为不要
的配置导致一些web请求都被拒绝,导致非常大的regression. 由于程序员本身熟悉自己相关模块,但是整个项目级别可能没法很好把握,所以很有可能忽略其他
可能在使用该模块的功能,从而导致问题发生.
对于这种情况,个人感觉要从项目经理或者产品经理来协调整个项目,首先做好各个模块摸底,统计出哪些模块在使用,另外,对各个模块评估更新配置带来风险有多大,
其次也是最重要的就是要给予足够到regression测试.
</p>
</div>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>一个整型溢出的bug</title>
      <link>https://robin2003.github.io/blog/一个整型溢出的bug.html</link>
      <author>undefined</author>
      <guid isPermaLink="false">https://robin2003.github.io/blog/一个整型溢出的bug.html</guid>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0800</pubDate>
      <description><![CDATA[
<div id="outline-container-一个整型溢出的bug" class="outline-2">
<h2 id="一个整型溢出的bug">一个整型溢出的bug</h2>
<div class="outline-text-2" id="text-一个整型溢出的bug">
</div>
<div id="outline-container-问题复原" class="outline-3">
<h3 id="问题复原">问题复原</h3>
<div class="outline-text-3">
<p>
最近在项目中发现一个很典型的整型溢出的bug，先讲讲问题经过。
</p>

<p>
在项目中，一个对象有个expiration的成员变量，目的是标记该对象是否有效，该成员变量声明如下：
</p>
<pre class="example">
unsigned long long mExpirationTime;
</pre>

<p>
项目中，为了过滤掉要在2分钟内变得无效的对象，于是就写了如下的逻辑：
</p>
<pre class="example">
...
for( int i = 0; i &lt; size(); i++)
{
...
    if( ( mExpirationTime - THRESHOLD_IN_SECOND ) &gt; mCurrentTime )
    {   
        printf("Has been marked as expiration, ignore it!\n");
        continue;
    }
...
}
...
</pre>
<p>
本意是过滤掉无效对象，但是当程序跑起来，发现没有被标记的对象依然也被过滤掉！
</p>

<p>
最后终于发现过滤逻辑有问题。
</p>

<p>
对于*mExpirationTime*,正常对象，初始值都是0，当程序在运行到上面代码段时候，由于0减去
一个正数THRESHOLD<sub>IN</sub><sub>SECOND就变成一个负值了</sub>，减法完成后的结果最终会转换成被减数相同
类型，由于被减数是无符号型，所以负值就overflow 成一个正值，最终导致if 条件成立，正常
对象被过滤掉。
</p>
</div>
</div>

<div id="outline-container-启示" class="outline-3">
<h3 id="启示">启示</h3>
<div class="outline-text-3">
<p>
在开发过程中，这种隐式数据转换场景非常多，出问题后，也往往很隐蔽，所以平时一定要格外小心。
</p>

<p>
能想到的可以避免的一些途径有：
</p>
<ol class="org-ol">
<li>开发阶段： 谨慎的使用无符号作为条件判断，充分考虑到overflow可能性；</li>
<li>code review阶段：要in mind这种数值类型，尤其是无符号类型，在作为判断条件时候，一定要
重点关注；</li>
<li>重视静态代码检查工具。很多静态代码监测工具都能够识别出这种潜在问题，很多项目code base比较大，
系统也比较复杂，因为历史原因，可能埋藏了很多这样的潜在问题，这种时候，静态代码检测工具就
有用武之地了。</li>
</ol>
</div>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://robin2003.github.io/blog/hello.html</link>
      <author>undefined</author>
      <guid isPermaLink="false">https://robin2003.github.io/blog/hello.html</guid>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0800</pubDate>
      <description><![CDATA[
<div id="outline-container-hello-world" class="outline-2">
<h2 id="hello-world">hello world</h2>
</div>
]]></description>
    </item>
    

  </channel>
</rss>
